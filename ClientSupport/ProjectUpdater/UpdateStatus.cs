using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

using LocalResources;

namespace ClientSupport.ProjectUpdater
{
    public class UpdateStatus
    {
        public delegate void ProgressUpdate(long progress, long total);

        public enum UpdateMode
        {
            DownloadAndInstall,
            PreFlightCheck,
            Uninstall,
            UninstallSilent,
            CalculateValidatedSize
        }

        // Most recent error message generated by the update process.
        public String m_error;

        // True if the update process has been successful this far.
        private bool m_successInternal;
        public bool m_success
        {
            get { return m_successInternal; }
            set
            {
                m_successInternal = value;
                if (!m_successInternal)
                {
                    m_successInternal = false;
                }
            }
        }

        public UpdateMode m_mode;

        /// <summary>
        /// Path to the downloaded installer used to perform the update.
        /// </summary>
        private String m_installerFile;
        public String InstallerFile { get { return m_installerFile; } }

        private ProgressMonitor m_monitor;
        public ProgressMonitor Monitor { get { return m_monitor; } }

        /// <summary>
        /// The project being updated.
        /// </summary>
        private Project m_project;
        public Project Project { get { return m_project; } }

        /// <summary>
        /// The total size of all files in the project.
        /// </summary>
        private long m_totalSize;
        public long TotalSize { get { return m_totalSize; } }

        /// <summary>
        /// The size of the largest individual file in the project.
        /// </summary>
        private long m_largestSize;
        public long LargestFileSize { get { return m_largestSize; } }

        /// <summary>
        /// The size of all files successfully validated.
        /// </summary>
        private long m_validatedSize;
        public long ValidatedSize { get { return m_validatedSize; } }

        /// <summary>
        /// Details of the latest version of the project available on the
        /// server.
        /// </summary>
        public DownloadManagerBase.RemoteFileDetails Remote;

        public UpdateStatus(ProgressMonitor monitor, Project project)
        {
            m_success = true;
            m_error = null;
            m_monitor = monitor;
            m_project = project;
            m_totalSize = 0;
            m_validatedSize = 0;
            m_largestSize = 0;
        }

        public void SetError(String error)
        {
            m_success = false;
            m_error = error;
        }

        public void SetNewError(String error)
        {
            m_success = false;
            if (m_error == null)
            {
                m_error = error;
            }
        }

        /// <summary>
        /// Start the update process.
        /// </summary>
        public void Begin()
        {
            m_monitor.Start(Project.Name);

            // Sleep briefly to let the UI catch up before starting real work.
            Thread.Sleep(500);
        }

        /// <summary>
        /// Set the installer file.
        /// 
        /// The way the installer file is used does not seem very intuitive,
        /// it is not immediately obvious what it refers to or where it is
        /// used. By moving it to the status object it is hoped that the
        /// current usage will become clear and a decision can be made as to
        /// the future.
        /// </summary>
        /// <param name="path">The path installed from.</param>
        public void InstalledFromFile(String path)
        {
            m_installerFile = path;
        }

        // Test whether we were provided an installer or a manifest file.
        public bool IsInstaller()
        {
            if (m_success)
            {
                String installerFile = System.IO.Path.GetFileName(Remote.LocalFileName);
                installerFile = installerFile.ToLowerInvariant();
                if (installerFile.EndsWith(".xml"))
                {
                    return false;
                }
                if (installerFile.EndsWith(".xml.gz"))
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// Check whether the behaviour has been cancelled between chunks of
        /// work. Long running tasks should also check internally.
        /// </summary>
        public void CheckForCancellation()
        {
            if (m_success)
            {
                if (m_monitor != null)
                {
                    if (m_monitor.CancellationRequested())
                    {
                        SetNewError(LocalResources.Properties.Resources.PU_ActionCancelled);
                    }
                }
            }
        }

        /// <summary>
        /// Update the progress of the external monitor directly.
        /// </summary>
        /// <param name="progress">Progress so far</param>
        /// <param name="total">Progress</param>
        public void UpdateMonitorProgress(long progress, long total)
        {
            m_monitor.ReportActionProgress(Project.Name, progress);
        }

        /// <summary>
        /// Update the totals to include a file of the passed size.
        /// </summary>
        /// <param name="size">Size of file to be included.</param>
        public void IncludeFile(long size)
        {
            m_totalSize += size;
            if (size > m_largestSize)
            {
                m_largestSize = size;
            }
        }

        /// <summary>
        /// Update the total validated size to include a file of the passed size.
        /// </summary>
        /// <param name="size">Size of the validated file.</param>
        public void ValidateFile(long size)
        {
            m_validatedSize += size;
        }

        /// <summary>
        /// Signal completion of the update and report success or failure.
        /// </summary>
        public void Finalise()
        {
            Project.Update();
            if (!m_success)
            {
                m_monitor.Fail(Project.Name, m_error);
            }
            else
            {
                Project.SetInstaller(InstallerFile);
                m_monitor.Complete(Project.Name);
            }
        }
    }
}
